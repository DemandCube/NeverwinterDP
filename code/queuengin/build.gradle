configurations {
  //runtime.exclude module: 'log4j'
}


dependencies {
  compile project(':commons/utils')
  compile project(':commons/api')
  compile project(':commons/cluster')

  compile group: 'org.apache.zookeeper', name: 'zookeeper', version: project.zookeeperVersion
  compile group: 'org.apache.kafka', name: 'kafka_2.10', version: project.kafkaVersion

  //compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.2'
}

task release (dependsOn: 'build') << {
  def releaseDir = "${buildDir}/release/queuengin"
  doRelease(releaseDir)
}

def doRelease(String releaseDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the release directory ${releaseDir}"
  println "*************************************************"

  println "Copying kafka_2.8.0-0.8.1.1 to the release directory"
  copy {
    from "${buildDir}/../../../../NeverwinterDP-dependencies/kafka_2.8.0-0.8.1.1"
    into "${releaseDir}"
  }

  println "Patch kafka_2.8.0-0.8.1.1 with the custom script"
  copy {
    from "src/app"
    into "${releaseDir}"
  }

  def jars = [ 
    "lib.common", "test-framework",
    "jackson-core-asl", "jackson-mapper-asl"

  ] 

  println "Patch kafka_2.8.0-0.8.1.1 with the additional library"
  project(':sparkngin').configurations.compile.each { File file -> 
    if(isIn(jars, file)) {
      println "  Copy $file.name to queuengin/libs"
      copy {
        from file
        into "${releaseDir}/libs"
      }
    }
  }
  println "Patch kafka_2.8.0-0.8.1.1 with the queuengin library"
  copy {
    from "${buildDir}/libs"
    into "${releaseDir}/libs"
  }
}
